name: Deploy Flask App

on:
  push:
    branches:
      - master
      - dev

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest

      - name: Run tests with pytest
        run: pytest

  deploy:
    name: Deploy to ${{ github.ref_name == 'master' && 'Production' || 'Development' }}
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # This condition ensures the job only runs for the specified branches
    if: github.ref_name == 'master' || github.ref_name == 'dev'

    environment:
      name: ${{ github.ref_name == 'master' && 'production' || 'development' }}
      url: ${{ secrets.APP_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup SSH key for server connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy application files via rsync
        run: |
          echo "ðŸš€ Starting to sync files to the server..."
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='myenv/' \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/flask-app/
          echo "âœ… File sync complete."

      - name: Install dependencies and restart server
        run: |
          # This step requires passwordless sudo on the target server for the deployment user.
          #
          # SSH into your server and run 'sudo visudo'. Then, add the following line at the end of the file,
          #   ${{ secrets.SERVER_USER }} ALL=(ALL) NOPASSWD: /usr/bin/systemctl * flaskapp
          ssh -T ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -ex

          echo "::group::Server-side operations"
          echo "--- Identifying user on remote server ---"
          echo "Running commands as user: $(whoami)"
          echo "User details: $(id)"

          # Define environment-specific variables.
          # You could also set these via secrets if they need to differ between environments.

          cd ${{ secrets.APP_DIR }}

          echo "--- Setting up Python virtual environment ---"
          python3 -m venv venv
          source venv/bin/activate

          echo "--- Installing dependencies from requirements.txt ---"
          pip install -r requirements.txt

          echo "--- Restarting application service with systemd ---"
          sudo /usr/bin/systemctl restart ${{ secrets.SERVICE_NAME }}

          echo "--- Checking application status ---"
          # Add a small delay to allow the service to start
          sleep 5
          # Use 'is-active' for a reliable script-based check. `set -e` will cause a failure if the service is not active.
          sudo /usr/bin/systemctl is-active --quiet ${{ secrets.SERVICE_NAME }}
          echo "âœ… Service is active and running."

          # For more detailed logs, also print the full status.
          sudo /usr/bin/systemctl status ${{ secrets.SERVICE_NAME }} --no-pager
          echo "::endgroup::"

          echo "ðŸŽ‰ Deployment to server successful!"
          EOF
